#!/bin/sh

# Location: /etc/initramfs-tools/hooks

# needed directorys that will be created in initramfs
needed_directories="/usr/sbin/ /var/run/ /var/tmp/ /var/lock /var/log"

# mandatory dependencies
depends="/sbin/cryptsetup /sbin/dmsetup /sbin/partprobe"

# option dependencies for initramfs panic troubleshooting
depends="${depends} /bin/lsblk" # /sbin/kpartx


PREREQ=""

prereqs()
{
    echo "$PREREQ"
}

case $1 in
    prereqs)
        prereqs
        exit 0
    ;;
esac

. /usr/share/initramfs-tools/hook-functions

echo "Including cryptroot in initramfs."

for dir in $needed_directories
do
    mkdir -p ${DESTDIR}${dir}
done
chmod 777 ${DESTDIR}/var/tmp/ -R

for dep in $depends
do
    if [ ! -x $dep ]
    then
        echo "$0: Missing dependency: $dep"
        exit 1
    fi
    copy_exec $dep
done

if [ ! -e "/root/crypto_keyfile.bin" ]
then
    warning "$0: Mising /root/crypto_keyfile.bin"
    exit 1
else
    mkdir -p ${DESTDIR}/root
    chmod 700 ${DESTDIR}/root
    cp /root/crypto_keyfile.bin "${DESTDIR}/root/"
fi


# Based on official cryptroot:

add_crypto_modules() {
    local mod file altmod found genericfound
    mod="$1"
    found=""
    genericfound=""

    if [ -z "$mod" ]; then
        return 1
    fi

    # We have several potential sources of modules (in order of preference):
    #
    #   a) /lib/modules/$VERSION/kernel/arch/$ARCH/crypto/$mod-$specific.ko
    #   b) /lib/modules/$VERSION/kernel/crypto/$mod_generic.ko
    #   c) /lib/modules/$VERSION/kernel/crypto/$mod.ko
    #
    # and (currently ignored):
    #
    #   d) /lib/modules/$VERSION/kernel/drivers/crypto/$specific-$mod.ko

    for file in $(find "$MODULESDIR/kernel/arch/" -name "$mod-*.ko" 2>/dev/null); do
        altmod="${file##*/}"
        altmod="${altmod%.ko}"
        manual_add_modules "$altmod"
        found="yes"
    done

    for file in $(find "$MODULESDIR/kernel/crypto/" -name "${mod}_generic.ko" 2>/dev/null); do
        altmod="${file##*/}"
        altmod="${altmod%.ko}"
        manual_add_modules "$altmod"
        found="yes"
        genericfound="yes"
    done

    if [ -z "$genericfound" ]; then
        for file in $(find "$MODULESDIR/kernel/crypto/" -name "${mod}.ko" 2>/dev/null); do
            altmod="${file##*/}"
            altmod="${altmod%.ko}"
            manual_add_modules "$altmod"
            found="yes"
        done
    fi

    if [ -z "$found" ]; then
        return 1
    fi

    return 0
}

# You may need to complete this list if you need custom ciphers/modes/IVs
for mod in aes cbc chainiv cryptomgr krng sha1 sha256 xts serpent twofish; do
    add_crypto_modules $mod
done

# /CRAZY/ ALL CRYPTO MODULES!
# TODO: Identify what is really needed, then clean up
for mod in mcryptd cmac cts ablk_helper echainiv seed async_pq async_memcpy async_xor async_tx async_raid6_recov raid6test algif_hash algif_rng fcrypt lrw rmd320 algif_skcipher pcbc serpent_generic zlib cast5_generic keywrap ctr af_alg lz4hc salsa20_generic cast6_generic ghash-generic arc4 cast_common xor michael_mic authenc gcm poly1305_generic anubis gf128mul cryptd pcrypt authencesn tgr192 vmac khazad seqiv tea 842 crypto_user algif_aead ccm md4 drbg des_generic pkcs7_test_key wp512 lz4 twofish_common chacha20poly1305 camellia_generic xcbc rmd256 blowfish_generic rmd128 chacha20_generic jitterentropy_rng tcrypt twofish_generic crc32 rmd160 blowfish_common deflate ansi_cprng xts; do
    add_crypto_modules $mod
done    

for mod in dm_mod dm_crypt; do
    manual_add_modules $mod
done

cpu_has_aesni() {
    return $(grep -q "^flags\s*:\s*.*aes" /proc/cpuinfo)
}

if cpu_has_aesni; then
    manual_add_modules aesni
fi

copy_exec /sbin/cryptsetup
copy_exec /sbin/dmsetup
copy_exec /lib/cryptsetup/askpass


# We need sed. Either via busybox or as standalone binary.
if [ "$BUSYBOX" = "n" ] || [ ! -e ${BUSYBOXDIR}/busybox ]; then
    copy_exec /bin/sed
fi

exit 0